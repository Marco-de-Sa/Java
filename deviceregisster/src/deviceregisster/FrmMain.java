/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package deviceregisster;

import java.io.File;
import java.io.IOException;
import java.util.InputMismatchException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
*
* @author elna.vanaarde
*/
public class FrmMain extends javax.swing.JFrame {
 //Create object of the manager class
 StudentManager students = new StudentManager();
 public FrmMain()
 {
 initComponents();
 //When the form is loaded, call method to list the student data
 populateStudentData();
 }
 /**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
 @SuppressWarnings("unchecked")
 // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
 private void initComponents() {
 THE CODE IN THIS METHOD IS GENERATED BY THE FORM EDITOR. I’VE REMOVED IT TO AVOID CONFUSION.
 }// </editor-fold>//GEN-END:initComponents
 private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {
 //When the Search button is selected, call the method that reads the student info into the array
 populateStudentData();
 }//GEN-LAST:event_btnSearchActionPerformed
 private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {
 //When the Logout button is selected, close the program
 System.exit(0);
 }//GEN-LAST:event_btnLogOutActionPerformed
 private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {
 //When the Add button is selected, show a popup form
 //This will centre the sub-form
 frmAdd.setLocationRelativeTo(this);
 //Initialise components
 txtNameOnAddForm.setText("");
 cmbGradeOnAddForm.setSelectedIndex(0);
 //Show the sub-form
 frmAdd.setVisible(true);
 }//GEN-LAST:event_btnAddActionPerformed
 private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
 // TODO add your handling code here:
 }//GEN-LAST:event_formFocusGained
 private void btnAddOnAddFormActionPerformed(java.awt.event.ActionEvent evt) {
 if (txtNameOnAddForm.getText().isEmpty())
 {
 //Display error message if name not supplied
 JOptionPane.showMessageDialog(null, "Please fill in the name");
 }
 else
 {
 //Insert the new student, send name and grade as parameters
 students.addStudentToDB(txtNameOnAddForm.getText(),
Integer.parseInt(cmbGradeOnAddForm.getSelectedItem().toString()));
 //Refresh student info
 populateStudentData();
 //Hide form
 frmAdd.setVisible(false);
 }
 }//GEN-LAST:event_btnAddOnAddFormActionPerformed
 private void btnCancelOnAddFormActionPerformed(java.awt.event.ActionEvent evt) {
 //Hide form when the Cancel button is selected
 frmAdd.setVisible(false);
 }//GEN-LAST:event_btnCancelOnAddFormActionPerformed
 private void txtIdOnDeleteFormActionPerformed(java.awt.event.ActionEvent evt) {
 // TODO add your handling code here:
 }//GEN-LAST:event_txtIdOnDeleteFormActionPerformed
 private void btnDeleteOnDeleteFormActionPerformed(java.awt.event.ActionEvent evt) {
 //When the Delete button on the sub-form is selected, check if data valid and delete the student
 //Check if Id is filled in
 if (txtIdOnDeleteForm.getText().isEmpty())
 {
 //Display error message if Id not supplied
 JOptionPane.showMessageDialog(null, "Please fill in the Id");
 }
 else
 {
 try
 {
 //Check if Id is numeric. The next statement will fail if not and
 //the "catch" part will display an error
 int num = Integer.parseInt(txtIdOnDeleteForm.getText());
 //Confrim deletion
 int answer = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete thisstudent?",
 "Confirm", JOptionPane.YES_NO_OPTION);
 if (answer == 0) //yes
 {
 students.deleteStudentFromDB(Integer.parseInt(txtIdOnDeleteForm.getText()));
//Refresh student info
populateStudentData();
 }
 //Hide form
 frmDelete.setVisible(false);
 }
 catch(NumberFormatException i) //Trap the error of non-numeric Id is entered
 {
 //Display error message if Id is not numeric
 JOptionPane.showMessageDialog(null, "Please fill in a numeric value for the Id");
 }
 }
 }//GEN-LAST:event_btnDeleteOnDeleteFormActionPerformed
 private void btnCancelOnDeleteFormActionPerformed(java.awt.event.ActionEvent evt) {
 //Hide form when the Cancel button is selected
 frmDelete.setVisible(false);
 }//GEN-LAST:event_btnCancelOnDeleteFormActionPerformed
 private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {
 //When the Delete button is selected, show a popup form
 //This will centre the sub-form
 frmDelete.setLocationRelativeTo(this);
 //Initialise component
 txtIdOnDeleteForm.setText("");
 //Show the sub-form
 frmDelete.setVisible(true);
 }//GEN-LAST:event_btnDeleteActionPerformed
 private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {
 //When the Update button is selected, show a popup form
 //This will centre the sub-form
 frmUpdate.setLocationRelativeTo(this);
 //Initialise Id textbox
 txtIdOnUpdateForm.setText("");
 //Set components invisible
 pnlDataOnUpdateForm.setVisible(false);
 btnUpdateOnUdpateForm.setVisible(false);
 //Show the sub-form
 frmUpdate.setVisible(true);
 }//GEN-LAST:event_btnUpdateActionPerformed
 private void btnUpdateOnUdpateFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN￾
FIRST:event_btnUpdateOnUdpateFormActionPerformed
 //When the Update button on the sub-form is selected, check if data valid and update the student
 //Check if name is filled in
 if (txtNameOnUpdateForm.getText().isEmpty())
 {
 //Display error message if name not supplied
 JOptionPane.showMessageDialog(null, "Please fill in the name");
 }
 else //Data is valid
 {
 //Update student in array
 students.updateStudentInDB(Integer.parseInt(txtIdOnUpdateForm.getText()),
txtNameOnUpdateForm.getText(),
 Integer.parseInt(cmbGradeOnUpdateForm.getSelectedItem().toString()));
 //Refresh student info
 populateStudentData();
 //Hide form
 frmUpdate.setVisible(false);
 }
 }//GEN-LAST:event_btnUpdateOnUdpateFormActionPerformed
 private void btnCancelOnUpdateFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN￾
FIRST:event_btnCancelOnUpdateFormActionPerformed
 //Hide form when the Cancel button is selected
 frmUpdate.setVisible(false);
 }//GEN-LAST:event_btnCancelOnUpdateFormActionPerformed
 private void txtIdOnUpdateFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN￾
FIRST:event_txtIdOnUpdateFormActionPerformed
 // TODO add your handling code here:
 }//GEN-LAST:event_txtIdOnUpdateFormActionPerformed
 private void btnShowDataOnUpdateFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN￾
FIRST:event_btnShowDataOnUpdateFormActionPerformed
 //When the Show data button on the Update sub-form is selected, check if data valid and populate the
screen
 //Declare variable
 int studentIndex;
 //Check if Id is filled in
 if (txtIdOnUpdateForm.getText().isEmpty())
 {
 //Display error message if Id not supplied
 JOptionPane.showMessageDialog(null, "Please fill in the Id");
 }
 else
 {
 try
 {
 //Check if Id is numeric. The next statement will fail if not and
 //the "catch" part will display an error
 // int studentId = Integer.parseInt(txtIdOnUpdateForm.getText());
 Student student = new Student();
 //Find the array index for the specified id
 student = students.getOneStudent(Integer.parseInt(txtIdOnUpdateForm.getText()));
 if (student == null) //not found
 {
 //Display message
JOptionPane.showMessageDialog(null, "There is no student with Id " +
txtIdOnUpdateForm.getText());
 }
 else //found
 {
 //Populate screen
txtNameOnUpdateForm.setText(student.getName());
//If value id 8, index is 0. If value is 9, index is 1, etc. Thus, substract 8 from
//value to determine selected item's index
cmbGradeOnUpdateForm.setSelectedIndex(student.getGrade() - 8);
 //Set components visible
pnlDataOnUpdateForm.setVisible(true);
 btnUpdateOnUdpateForm.setVisible(true);
 }
 }
 catch(NumberFormatException i) //Trap the error of non-numeric Id is entered
 {
 //Display error message if Id is not numeric
 JOptionPane.showMessageDialog(null, "Please fill in a numeric value for the Id");
 }
 }
 }//GEN-LAST:event_btnShowDataOnUpdateFormActionPerformed
 private void mnuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN￾
FIRST:event_mnuHelpActionPerformed
 }//GEN-LAST:event_mnuHelpActionPerformed
 private void mniOpenHelpFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN￾
FIRST:event_mniOpenHelpFileActionPerformed
 //This method opens the Help file
 try
 {
 //Set the file object
 File file = new File("Help.pdf");
 //File file = new File("Help.html");
 //Open file
 Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + file);
 }
 catch(IOException e) //Trap error if file could not be diplayed
 {
 //Show error message
 JOptionPane.showMessageDialog(null,"Help file could not be displayed");
 }
 }//GEN-LAST:event_mniOpenHelpFileActionPerformed
 private void txtNameOnUpdateFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN￾
FIRST:event_txtNameOnUpdateFormActionPerformed
 // TODO add your handling code here:
 }//GEN-LAST:event_txtNameOnUpdateFormActionPerformed
 private void populateStudentData()
 //This show the student data on the screen
 {
 //Clear text area
 txaStudents.setText("");
 //Declare variables that will represent the WHERE and ORDER BY clauses
 //of the SELECT statement
 String sort;
 String where = "";
 //Check if the user opted to sort according to name
 if(cmbSortBy.getSelectedItem().toString().equals("Name"))
 {
 sort = "StudentName";
 }
 else //If not - Sort according to grade. This is the default
 {
 sort = "Grade";
 }
 //Check if all data should be shown
 //If a specific grade is selected, create a WHERE clause
 if (!cmbGrade.getSelectedItem().equals("All"))
 {
 where = "Grade = " + cmbGrade.getSelectedItem();
 }
 //If the "Starts with" textfield is filled in, add to / create a WHERE clause
 if (!txtNameStartsWith.getText().isEmpty())
 {
 //If WHERE clause is still empty, create WHERE clause
 if(where.isEmpty())
 where = "StudentName LIKE '" + txtNameStartsWith.getText() + "*'";
 else //If WHERE clause is populated, add to it
 where += " AND StudentName LIKE '" + txtNameStartsWith.getText() + "*'";
 }
 //Fill the text area with data
 txaStudents.setText(students.getStudentData(sort, where));
 }
 /**
 * @param args the command line arguments
 */
 public static void main(String args[]) {
 }
}